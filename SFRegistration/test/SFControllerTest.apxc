@isTest
public class SFControllerTest {
	
    @testSetup
    public static void setup() {
        List<SFRegistration__c> sf_register = new List<SFRegistration__c>();
        
        for(Integer i=0;i<200;i++) {
            sf_register.add(new SFRegistration__c(Name='Name ' + i,
                                                  Company__c='Company ' + i,
                                                  Email__c='test' + i + '@gmail.com'));
        }
        
        List<Lead> leads = new List<Lead>();
        for(SFRegistration__c sf : sf_register) {
            leads.add(new Lead(LastName=sf.Name,
                                 Company=sf.Company__c,
                                 Email=sf.Email__c));
        }
        
        insert leads;
        
        for(Integer j=0;j<200;j++) {
            sf_register.get(j).Lead__c = leads.get(j).Id;
        }
        
        upsert sf_register;
    }
    
    private static List<Lead> getLeads() {
        return [Select Id from Lead where Status='Closed - Converted' AND Id IN (Select Lead__c from SFRegistration__c where Status__c='Approved')];
    }
    
    @isTest
    public static void valid_sf() {
        SFRegistration__c  sf = new SFRegistration__c(Name='SFValid',
                                                     Company__c='Company',
                                                     Email__c='abcd@gmail.com');
        Test.startTest();
        SFController.sf_register(sf);
        Test.stopTest();
        
        System.assert(sf.Lead__c!=null);
    }
    
    @isTest
    public static void duplicate_sf() {
        valid_sf();
        SFRegistration__c  sf = new SFRegistration__c(Name='SFDuplicate',
                                                     Company__c='DuplicateCompany',
                                                     Email__c='abcd@gmail.com');
        try {
        	SFController.sf_register(sf);
			System.assert(false);
        } catch (AuraHandledException e) {
            System.assert(e.getMessage().contains('DUPLICATE_VALUE'));
        }
    }
    
    @isTest
    public static void invalid_sf() {
        SFRegistration__c  sf = new SFRegistration__c(Name='SFInvalid',
                                                     Company__c='Company',
                                                     Email__c='abcd@gma');
        try {
        	SFController.sf_register(sf);
			System.assert(false);
        } catch (AuraHandledException e) {
            System.assert(e.getMessage().contains('INVALID_EMAIL_ADDRESS'));
        }
    }
    
    @isTest
    public static void approveAll_with_all() {
        Test.startTest();
        SFController.approveAll('all');
        Test.stopTest();
        
        System.assert(getLeads().size() == 200);
    }
    
    @isTest
    public static void approveAll_with_single_email() {
        Test.startTest();
        SFController.approveAll('test0@gmail.com,');
        Test.stopTest();
        
        System.assert(getLeads().size() == 1);
    }
    
    @isTest
    public static void approveAll_with_multiple_emails() {
        Test.startTest();
        SFController.approveAll('test0@gmail.com,test1@gmail.com,test2@gmail.com');
        Test.stopTest();
        
        System.assert(getLeads().size() == 3);
    }
    
    @isTest
    public static void approveAll_with_multiple_emails_with_some_incorrect() {
        Test.startTest();
        SFController.approveAll('test0@gmail.com,tess@gmail.com,tester@gmail.com,test1@gmail.com');
        Test.stopTest();

        System.assert(getLeads().size() == 2);
    }
    
    @isTest
    public static void approveAll_with_already_approved() {
        approveAll_with_all();
        
        try{
            SFController.approveAll('test0@gmail.com');
			System.assert(false);
        } catch(AuraHandledException e) {
            System.assert(e.getMessage().contains('No Emails found or email(s) already approved'));
        } 
    }
    
    @isTest
    public static void approveAll_with_incorrect_email() {
        try{
            SFController.approveAll('12345');
            System.assert(false);
        } catch(AuraHandledException e) {
            System.assert(e.getMessage().contains('No Emails found or email(s) already approved'));
        }
    }
}